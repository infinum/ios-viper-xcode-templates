//
//  RxLoginPresenter.swift
//  Viper-v2-Demo
//
//  Created by Zvonimir Medak on 22.09.2021..
//  Copyright (c) 2021 Infinum. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation
import RxSwift
import RxCocoa

final class RxLoginPresenter {

    // MARK: - Private properties -
    static private let minimumPasswordLength: UInt = 6

    private unowned let view: RxLoginViewInterface
    private let interactor: RxLoginInteractorInterface
    private let wireframe: RxLoginWireframeInterface

    private let emailValidator: StringValidator
    private let passwordValidator: StringValidator
    private let authorizationManager: AuthorizationAdapter

    private let disposeBag: DisposeBag
    // MARK: - Lifecycle -

    init(
        view: RxLoginViewInterface,
        interactor: RxLoginInteractorInterface,
        wireframe: RxLoginWireframeInterface,
        authorizationManager: AuthorizationAdapter = AuthorizationAdapter.shared
    ) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
        self.authorizationManager = authorizationManager

        emailValidator = EmailValidator()
        passwordValidator = PasswordValidator(minLength: RxLoginPresenter.minimumPasswordLength)
        disposeBag = DisposeBag()
    }
}

// MARK: - Extensions -

extension RxLoginPresenter: RxLoginPresenterInterface {

    func configure(with output: RxLogin.ViewOutput) -> RxLogin.ViewInput {
        let inputs = initializeInputs(with: output.actions.email, output.actions.password)
        initializeLogin(
            with: output.actions.login,
            email: output.actions.email,
            password: output.actions.password
        )
        initializeRegister(with: output.actions.register)
        return RxLogin.ViewInput(events: RxLoginEvents(buttonAvailability: inputs))
    }

}

//MARK: - Private Extensions -

private extension RxLoginPresenter {

    func initializeInputs(with email: Driver<String?>, _ password: Driver<String?>) -> Driver<Bool> {

        Observable.combineLatest(
            email.asObservable().compactMap { $0 },
            password.asObservable().compactMap { $0 }
        )
            .map { [unowned self] email, password in
                isEmailValid(email) && isPasswordValid(password)
            }
            .asDriver(onErrorDriveWith: .never())
            .startWith(false)
    }

    func initializeLogin(with login: Signal<Void>, email: Driver<String?>, password: Driver<String?>) {

        let inputs = Driver.combineLatest(
            email.asObservable().compactMap { $0 }.asDriver(onErrorDriveWith: .empty()),
            password.asObservable().compactMap { $0 }.asDriver(onErrorDriveWith: .empty())
        )
        login
            .withLatestFrom(inputs)
            .flatMap { [unowned self] email, password -> Signal<User> in
                interactor.login(with: email, password)
                    .do(onError: { [unowned self] error in
                        view.hideProgressHUD()
                        wireframe.showErrorAlert(with: error.localizedDescription)
                    }, onSubscribe: { [unowned view] in
                        view.showProgressHUD()
                    })
                    .asSignal(onErrorSignalWith: .never())
            }
            .do(onNext: { [unowned self] user in
                authorizationManager.authorizationHeader = user.authorizationHeader
            })
            .emit(onNext: { [unowned wireframe] _ in
                wireframe.navigate(to: .home)
            })
            .disposed(by: disposeBag)
    }

    func isEmailValid(_ email: String) -> Bool {
        return emailValidator.isValid(email)
    }

    func isPasswordValid(_ password: String) -> Bool {
        return passwordValidator.isValid(password)
    }

    func initializeRegister(with register: Signal<Void>) {
        register
            .emit(onNext: { [unowned wireframe] in
                wireframe.navigate(to: .register)
            })
            .disposed(by: disposeBag)
    }
}
